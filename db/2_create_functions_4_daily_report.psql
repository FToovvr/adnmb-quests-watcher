CREATE FUNCTION get_daily_threads_report(
    in _lower_bound timestamptz,
    in _upper_bound timestamptz
) RETURNS TABLE (
    id              integer,
    parent_board_id integer,
    created_at      timestamptz,
    is_new          boolean,
    is_disappeared  boolean,

    title   text,
    name    text,
    content text,

    total_response_count            integer,
    increased_response_count        integer,
    increased_response_count_by_po  integer,
    distinct_cookie_count           integer,
    increased_character_count       integer,
    increased_character_count_by_po  integer,

    blue_texts          text[],
    are_blue_texts_new  boolean
) AS $$

    WITH new_post AS (
        SELECT
            COALESCE(parent_thread_id, id) AS parent_thread_id,
            id, user_id,
            count_content_characters_works(content) AS content_character_count
        FROM post
        WHERE in_boundaries(post.created_at, _lower_bound, _upper_bound)
    )
    SELECT

        current_thread.id,
        parent_board_id,
        current_thread.created_at,
        in_boundaries(current_thread.created_at, _lower_bound, _upper_bound) AS is_new,
        -- 这一项就不还原当时情况了
        current_thread.is_disappeared,

        current_thread.title,
        current_thread.name,
        current_thread.content,

        current_thread.current_reply_count - (
            SELECT COUNT(id) FROM post
            WHERE post.parent_thread_id = current_thread.id 
                AND created_at >= _upper_bound)
            AS total_response_count,
        COUNT(new_post.id)
            - CASE WHEN in_boundaries(current_thread.created_at, _lower_bound, _upper_bound) THEN 1 ELSE 0 END
            AS increased_response_count,
        SUM(CASE WHEN current_thread.user_id = new_post.user_id THEN 1 ELSE 0 END)
            - CASE WHEN in_boundaries(current_thread.created_at, _lower_bound, _upper_bound) THEN 1 ELSE 0 END
            AS increased_response_count_by_po,
        -- 之前如果是新串而 po 只发串而没回应的话，会少算一块 po 的饼干
        COUNT(DISTINCT new_post.user_id)
            AS distinct_cookie_count,
        SUM(new_post.content_character_count)
            AS increased_character_count,
        SUM(CASE WHEN current_thread.user_id = new_post.user_id THEN new_post.content_character_count ELSE 0 END)
            AS increased_character_count_by_po,

        extract_blue_texts(current_thread.content)::text[] AS blue_texts,
        thread_got_new_blue_texts_between(current_thread.id, _lower_bound, _upper_bound) AS are_blue_texts_new

    FROM new_post
    LEFT JOIN (
        -- TODO: 有办法把这堆 ARRAY_AGG 去掉吗？
        SELECT thread.id,
            (ARRAY_AGG(current.parent_board_id))[1] AS parent_board_id,
            (ARRAY_AGG(current.created_at))[1] AS created_at,
            (ARRAY_AGG(current.user_id))[1] AS user_id,
            (ARRAY_AGG(current.title))[1] AS title,
            (ARRAY_AGG(current.name))[1] AS name,
            (ARRAY_AGG(current.content))[1] AS content,
            (ARRAY_AGG(thread_extra.updated_at))[1] AS updated_at,
            (ARRAY_AGG(thread_extra.is_disappeared))[1] AS is_disappeared,
            (ARRAY_AGG(thread_extra.current_reply_count))[1] AS current_reply_count
        FROM thread
        LEFT JOIN LATERAL thread_latest_revision_before(thread.id, _upper_bound) AS current ON TRUE
        LEFT JOIN thread_extra ON thread_extra.id = thread.id
        WHERE EXISTS(SELECT id FROM new_post WHERE new_post.parent_thread_id = thread.id)
        GROUP BY thread.id
    ) AS current_thread ON current_thread.id = new_post.parent_thread_id -- 这里的 "current" 其实指的是"当时"
    -- TODO: 有办法把 current_thread.id 之外的去掉吗？
    GROUP BY current_thread.id, parent_board_id, current_thread.created_at, current_thread.user_id, current_thread.title, current_thread.name, current_thread.content, current_thread.updated_at, current_thread.is_disappeared, current_thread.current_reply_count
    ORDER BY increased_response_count DESC;

    $$ LANGUAGE sql;

CREATE FUNCTION get_daily_qst_id_and_position(
    in _daily_qst_thread_id integer,

    in _lower_bound         timestamptz,
    in _upper_bound         timestamptz
) RETURNS TABLE (
    post_id     integer,
    "offset"    integer
) AS $$
    WITH daily_qst_response AS (
        SELECT id, created_at FROM response
        WHERE parent_thread_id = _daily_qst_thread_id
            AND in_boundaries(created_at, _lower_bound, _upper_bound)
            AND regexp_match(content, '^\[头条\]\s*<br />$', 'm') IS NOT NULL
        ORDER BY created_at DESC
        LIMIT 1
    )
    SELECT daily_qst_response.id, current_reply_count - (
        SELECT COUNT(id) FROM response
        WHERE parent_thread_id = _daily_qst_thread_id
        AND created_at > daily_qst_response.created_at
    )
    FROM daily_qst_response
    LEFT JOIN thread_extra ON thread_extra.id = _daily_qst_thread_id;
    $$ LANGUAGE sql;

CREATE FUNCTION get_meta_stats(
    in _lower_bound timestamptz,
    in _upper_bound timestamptz
) RETURNS TABLE (
    uploaded_bytes      integer,
    downloaded_bytes    integer,

    requested_board_page_count  integer,
    requested_thread_page_count integer
) AS $$
    SELECT 
        COALESCE(sum(uploaded_bytes), 0), COALESCE(sum(downloaded_bytes), 0),
        COALESCE(sum(requested_board_page_count), 0), COALESCE(sum(requested_thread_page_count), 0)
    FROM activity
    WHERE in_boundaries(fetched_since, _lower_bound, _upper_bound);
    $$ LANGUAGE sql;

CREATE FUNCTION get_tail_count(
    in _lower_bound timestamptz,
    in _upper_bound timestamptz
) RETURNS TABLE (
    tail_number integer,
    count       integer
) AS $$
    SELECT id % 10 AS tail_number, COUNT(id)
    FROM post
    WHERE in_boundaries(created_at, _lower_bound, _upper_bound)
        AND content in ('r', 'R')
    GROUP BY tail_number
    ORDER BY tail_number;
    $$ LANGUAGE sql;

CREATE FUNCTION get_count_of_tail_numbers_with_consecutive_digits(
    in _min_digits  integer,

    in _lower_bound timestamptz,
    in _upper_bound timestamptz
) RETURNS TABLE (
    length      integer,
    count       integer,
    zero_count  integer
) AS $$
    WITH rx AS (
        SELECT CONCAT('((\d)\2{', _min_digits-1,',}$)')
    )
    SELECT LENGTH(tail[1]), COUNT(id), SUM((tail[2] = '0')::INTEGER) AS zero_count
    FROM post, regexp_match(id::text, (SELECT * FROM rx)) AS tail
    WHERE in_boundaries(created_at, _lower_bound, _upper_bound)
        AND tail IS NOT NULL
    GROUP BY LENGTH(tail[1])
    ORDER BY LENGTH(tail[1]) DESC;
    $$ LANGUAGE sql;